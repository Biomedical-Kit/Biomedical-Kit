version: '2.2'
services:
  elasticsearch:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.13.0'
    container_name: TFG-elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - cluster.name=docker-cluster
      - cluster.routing.allocation.disk.threshold_enabled=false
      - discovery.type=single-node
      - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
      - ELASTIC_PASSWORD=tfg123
      - xpack.security.enabled=true
    ulimits:
      memlock:
        hard: -1
        soft: -1
    ports:
      - '9200:9200'
    networks:
      - elastic
    healthcheck:
      interval: 20s
      retries: 10
      test: >-
        curl -s http://localhost:9200/_cluster/health | grep -vq
        '"status":"red"'

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.0.0
    container_name: TFG-filebeat
    networks:
      - elastic
    command: filebeat -e -strict.perms=false
    volumes:
      - './filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml'
    depends_on:
      - kafka
      - mosquitto

  logstash:
    image: 'docker.elastic.co/logstash/logstash:8.0.0'
    container_name: TFG-logstash
    environment:
      LS_JAVA_OPTS: '-Xmx10g -Xms10g'
    ports:
      - '5044:5044'
      - '5000:5000/tcp'
      - '5000:5000/udp'
      - '9600:9600'
    networks:
      - elastic
    volumes:
      - './logstash/logstash_settings/:/usr/share/logstash/config/'
      - './logstash/logstash_pipeline/:/usr/share/logstash/pipeline/'
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: 'docker.elastic.co/kibana/kibana:7.13.0'
    container_name: TFG-kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_URL: 'http://elasticsearch:9200'
      ELASTICSEARCH_HOSTS: 'http://elasticsearch:9200'
      ELASTICSEARCH_USERNAME: 'elastic'
      ELASTICSEARCH_PASSWORD: 'tfg123'
    ports:
      - '5601:5601'
    networks:
      - elastic
    healthcheck:
      interval: 10s
      retries: 20
      test: >-
        curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null
        http://localhost:5601/api/status

  mosquitto:
    image: eclipse-mosquitto:1.5.5
    container_name: TFG-mosquitto
    networks:
      - elastic
    ports:
      - 1883:1883

  zookeeper:
    image: 'zookeeper:3.4.9'
    container_name: TFG-zookeeper
    networks:
      - elastic
    ports:
      - '2181:2181'
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: 'server.1=zookeeper:2888:3888'

  kafka:
    image: 'confluentinc/cp-kafka:5.5.0'
    container_name: TFG-kafka
    depends_on:
      - zookeeper
    networks:
      - elastic
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_CREATE_TOPICS: pulsioximetro, frecuenciacardiaca, emg, ecg

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: TFG-kafka-ui
    depends_on:
      - zookeeper
      - kafka
    networks:
      - elastic
    ports:
      - '8090:8090'
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - 'KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:19092'
      - 'KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181'
      - KAFKA_CLUSTERS_0_READONLY=true
      - SERVER_PORT=8090

networks:
  elastic:
    driver: bridge
